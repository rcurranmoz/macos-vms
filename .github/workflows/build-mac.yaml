name: Build macOS VM (PR and Main)

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

env:
  REGISTRY_HOST: 10.49.56.161
  REGISTRY_PORT: 5000
  REGISTRY_IMAGE: sequoia-tester
  TART_INSECURE: "--insecure"

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew tap cirruslabs/cli || true
          brew install packer cirruslabs/cli/tart ansible || true

      # -------------------------------------------------------------
      # Determine vault, build tag, and alias tag based on event type
      # -------------------------------------------------------------
      - name: Determine vault & tag
        id: determine
        run: |
          echo "Event: ${GITHUB_EVENT_NAME}"
          echo "Ref: ${GITHUB_REF_NAME}"

          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "Using real vault for main build"
            echo "VAULT_FILE=/etc/ronin/vault-real.yaml" >> $GITHUB_ENV
            echo "ALIAS_TAG=prod-latest" >> $GITHUB_ENV
            echo "BUILD_TAG=prod-${GITHUB_SHA}" >> $GITHUB_ENV
          else
            echo "Using fake vault for PR build"
            echo "VAULT_FILE=vault-fake.yaml" >> $GITHUB_ENV
            echo "ALIAS_TAG=pr-${{ github.event.pull_request.number }}-latest" >> $GITHUB_ENV
            echo "BUILD_TAG=pr-${{ github.event.pull_request.number }}-${GITHUB_SHA}" >> $GITHUB_ENV
          fi

          echo ""
          echo "‚úÖ Environment summary:"
          cat $GITHUB_ENV | grep -E 'VAULT_FILE|BUILD_TAG|ALIAS_TAG'
          echo ""

      # -------------------------------------------------------------
      # Optional: Print a masked SHA hash of the vault file (safety check)
      # -------------------------------------------------------------
      - name: Log vault hash (masked)
        run: |
          if [ -f "${VAULT_FILE}" ]; then
            sha=$(shasum -a 256 "${VAULT_FILE}" | cut -d' ' -f1)
            echo "Vault file hash (for verification only): ${sha:0:8}..."
          else
            echo "‚ö†Ô∏è Vault file not found at ${VAULT_FILE}"
          fi

      # -------------------------------------------------------------
      # Run the actual macOS image build using the vault
      # -------------------------------------------------------------
      - name: Run macOS VM build
        working-directory: mac/tester15
        env:
          VM_NAME: sequoia-tester
          VAULT_FILE: ${{ env.VAULT_FILE }}
        run: |
          echo "üèóÔ∏è Using VAULT_FILE=$VAULT_FILE"
          chmod +x builder.sh
          ./builder.sh

      # -------------------------------------------------------------
      # Verify registry connectivity before pushing
      # -------------------------------------------------------------
      - name: Verify registry connectivity
        run: |
          echo "üîç Testing http://${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}/v2/"
          curl -fsSL http://${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}/v2/ || \
            echo "‚ö†Ô∏è Registry reachable but returned non-200"

      # -------------------------------------------------------------
      # Push the built image to local OCI registry
      # -------------------------------------------------------------
      - name: Push built VM to local OCI registry
        if: ${{ success() }}
        env:
          REGISTRY: ${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}
          IMAGE: ${{ env.REGISTRY_IMAGE }}
        run: |
          echo "üöÄ Pushing ${IMAGE}:${BUILD_TAG} to ${REGISTRY} ..."
          tart push $TART_INSECURE ${IMAGE} ${REGISTRY}/${IMAGE}:${BUILD_TAG}

      # -------------------------------------------------------------
      # Tag and push alias (pr-latest or prod-latest)
      # -------------------------------------------------------------
      - name: Tag and push alias (branch-latest or prod-latest)
        if: ${{ success() }}
        env:
          REGISTRY: ${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}
          IMAGE: ${{ env.REGISTRY_IMAGE }}
        run: |
          echo "ü™∂ Tagging ${IMAGE}:${ALIAS_TAG} to ${REGISTRY} ..."
          tart push $TART_INSECURE ${IMAGE} ${REGISTRY}/${IMAGE}:${ALIAS_TAG}

      # -------------------------------------------------------------
      # Summary
      # -------------------------------------------------------------
      - name: Summary
        if: ${{ success() }}
        run: |
          echo ""
          echo "‚úÖ Build complete!"
          echo "  Registry: http://${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}/v2/"
          echo "  Image:    ${{ env.REGISTRY_IMAGE }}"
          echo "  Tag:      $BUILD_TAG"
          echo "  Alias:    $ALIAS_TAG"
          echo ""